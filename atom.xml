<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Longlongyu的个人站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://longlongyu.github.io/"/>
  <updated>2018-07-18T09:57:00.804Z</updated>
  <id>https://longlongyu.github.io/</id>
  
  <author>
    <name>Longlongyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo-theme-Cxo</title>
    <link href="https://longlongyu.github.io/2018/07/18/hexoThemeCxo/"/>
    <id>https://longlongyu.github.io/2018/07/18/hexoThemeCxo/</id>
    <published>2018-07-18T09:40:09.000Z</published>
    <updated>2018-07-18T09:57:00.804Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/demo/demo.png" alt="Cxo"></p><p>如果你喜欢这款主题，可以访问GITHUB地址：<a href="https://github.com/Longlongyu/hexo-theme-Cxo" title="hexo-theme-Cxo" target="_blank" rel="noopener">点这里</a></p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p>遇到任何使用上的问题，都可以向我留言。</p><p>感谢您的使用！</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/demo/demo.png&quot; alt=&quot;Cxo&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你喜欢这款主题，可以访问GITHUB地址：&lt;a href=&quot;https://github.com/Longlongyu/hexo-theme-Cxo&quot; title=&quot;hexo-theme-Cxo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;帮助&quot;&gt;&lt;a href=&quot;#帮助&quot; class=&quot;headerlink&quot; title=&quot;帮助&quot;&gt;&lt;/a&gt;帮助&lt;/h2&gt;&lt;p&gt;遇到任何使用上的问题，都可以向我留言。&lt;/p&gt;
&lt;p&gt;感谢您的使用！&lt;/p&gt;
    
    </summary>
    
    
      <category term="theme" scheme="https://longlongyu.github.io/tags/theme/"/>
    
      <category term="hexo" scheme="https://longlongyu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Express来开发项目(1)</title>
    <link href="https://longlongyu.github.io/2018/06/28/Exercise/"/>
    <id>https://longlongyu.github.io/2018/06/28/Exercise/</id>
    <published>2018-06-28T06:39:37.000Z</published>
    <updated>2018-07-15T02:18:33.520Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Express</em></strong> 是一个基于 <strong><em>Node.js</em></strong> 平台的 <strong><em>web</em></strong> 应用开发框架，它提供一系列强大的特性，可以帮助开发者创建各种 <strong><em>web</em></strong> 和移动设备应用。<br>用 <strong><em>Express</em></strong> 框架开发 <strong><em>web</em></strong> 项目可以直接构建整个项目框架并且将前端页面跟后台贯穿起来。</p><p>是一款高度包容、快速而极简的 <strong><em>Node.js Web</em></strong> 框架。</p><p><img src="https://cdn-images-1.medium.com/max/701/1*EKW3XazCN98jcVrlEP3H8g.png" alt="expressjs"></p><a id="more"></a><h1 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p><strong><em>Express</em></strong> 是基于 <strong><em>Node.js</em></strong> 的，所以 <strong><em>Node.js</em></strong> 的安装必不可少，不过因为之前通过 <strong><em>hexo</em></strong> 来架构博客的原因，我的电脑已经安装了。</p><p><img src="/img/assets/nodejs.png" alt="nodejs"></p><h2 id="用npm安装express"><a href="#用npm安装express" class="headerlink" title="用npm安装express"></a>用npm安装express</h2><p><strong><em>npm</em></strong> 是随同 <strong><em>Node.js</em></strong> 一起安装的包管理工具，可以用来安装卸载一些 <strong><em>api</em></strong> 包。<br>使用命令行工具<code>$ npm install (要安装的包)</code>进行本地安装，可以加上<code>-g</code>或者<code>--global</code>进行全局安装。<br>这里执行命令<code>$ npm install express</code>就行。</p><hr><h1 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h1><h2 id="使用express来新建项目框架"><a href="#使用express来新建项目框架" class="headerlink" title="使用express来新建项目框架"></a>使用express来新建项目框架</h2><p><code>cd</code>进入想要建项目的文件夹，执行<code>$ express (项目名称)</code>，会在该目录下创建一个新的你所命名的项目工程。<br>这里我执行的是<code>$ express yiyun --pug --css sass</code>，因为我这里使用了 <strong><em>pug</em></strong> 和 <strong><em>sass</em></strong> 来协助项目开发。   </p><p><strong>关于项目框架的说明</strong></p><blockquote><p>/bin: www  文件用于应用启动<br>/public: 静态资源目录：用来放置项目资源文件的<br>/routes: 路由，是项目的控制器，不过我对其了解不太深，是学习的重点之一<br>/views: view(视图)目录，用来放置前端页面的样式<br>app.js：程序的主文件夹，目前项目中有用到的就是添加新的页面以及页面相应的路由需要在这里配置<br>package.json：项目中用到的一些包的版本信息</p></blockquote><h2 id="试运行项目"><a href="#试运行项目" class="headerlink" title="试运行项目"></a>试运行项目</h2><p>项目创建好了之后，用命令行进入项目根目录，然后用<code>npm i</code>命令会安装 <strong><em>package.json</em></strong> 中的依赖项目。<br>通过执行<code>$ npm start</code>启动项目，到浏览器输入：<strong><em>localhost:3000</em></strong>，看到 <strong><em>Express</em></strong> 说明成功运行。</p><hr><h1 id="更好的开发体验"><a href="#更好的开发体验" class="headerlink" title="更好的开发体验"></a>更好的开发体验</h1><p>在编写项目的过程中，对代码进行调试时，每次调试时都需要关闭服务器才能进行重新刷新页面。<br>可以说对开发有着极大的不便，我们需要一些工具来让帮助我们有更好的开发体验。</p><h2 id="Express的debug模块"><a href="#Express的debug模块" class="headerlink" title="Express的debug模块"></a>Express的debug模块</h2><p>命令行输入<code>$ DEBUG=(项目名称):* npm start</code>就能执行 <strong><em>express</em></strong> 的 <strong><em>debug</em></strong> 模块。</p><h2 id="使用babel来写ES6"><a href="#使用babel来写ES6" class="headerlink" title="使用babel来写ES6"></a>使用babel来写ES6</h2><p>我在编写项目的 <strong><em>javascript</em></strong> 时，使用了 <strong><em>ES6</em></strong> 标准来撰写代码，但是目前的浏览器不支持大多的 <strong><em>ES6</em></strong> 标准，<br>这时候需要一款工具 <strong><em>babel</em></strong> 来帮助我们，<strong><em>babel</em></strong> 可以将 <strong><em>ES6</em></strong> 的代码转换为 <strong><em>ES5</em></strong> 标准，在当下 <strong><em>ES6</em></strong> 还没有在浏览器普及的今天，这可是大利器。</p><p>执行<code>$ npm install -g --save-dev babel-cli babel-core babel-plugin-transform-runtime babel-preset-es2015</code><br><strong><em>babel</em></strong> 已经在我们的项目中创建好了，这里的参数<code>--save-dev</code>会将所下载的工具保存到 <strong><em>package.json</em></strong> 的依赖项目中。</p><p>新建文件 <strong><em>.babelrc</em></strong> 并且写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;es2015&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据需求在命令行输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 转码结果输出到标准输出</span><br><span class="line"><span class="meta">$</span> babel example.js</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 转码结果写入一个文件</span><br><span class="line"><span class="meta">#</span> --out-file 或 -o 参数指定输出文件</span><br><span class="line"><span class="meta">$</span> babel example.js --out-file compiled.js</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line"><span class="meta">$</span> babel example.js -o compiled.js</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 整个目录转码</span><br><span class="line"><span class="meta">#</span> --out-dir 或 -d 参数指定输出目录</span><br><span class="line"><span class="meta">$</span> babel src --out-dir lib</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line"><span class="meta">$</span> babel src -d lib</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> -s 参数生成source map文件</span><br><span class="line"><span class="meta">$</span> babel src -d lib -s</span><br></pre></td></tr></table></figure><p>这样就可以简单地运行 <strong><em>babel</em></strong> 了。</p><h2 id="搭配webpack来开发"><a href="#搭配webpack来开发" class="headerlink" title="搭配webpack来开发"></a>搭配webpack来开发</h2><p>虽然可以编写 <strong><em>ES6</em></strong> 的代码了，但开发友好度依然不好，而且在调试的时候依然遇到了问题。   </p><p><code>Uncaught ReferenceError: require is not defined</code></p><p>再查看一下错误位置，发现出现错误的原因是因为我们使用了 <strong><em>import</em></strong> 和 <strong><em>export</em></strong> ，<strong><em>babel</em></strong> 对其只是进行了翻译，并不会合并代码的内容。所以我们需要另一项工具———— <strong><em>webpack</em></strong>。</p><p><strong><em>webpack</em></strong> 是一个模块打包器。<strong><em>webpack</em></strong> 的主要目标是将 <strong><em>JavaScript</em></strong> 文件打包在一起，将打包后的文件用于在浏览器中使用。</p><p>并且我们使用了 <strong><em>babel</em></strong> ，需要使用 <code>babel-loader</code> 来更好协助打包。</p><p>了解用途后，来命令行执行<code>$ npm install -g --save-dev webpack webpack-cli babel-loader</code></p><p>新建<code>webpack.config.js</code>文件，并对其进行配置   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry : &#123;</span><br><span class="line">main : <span class="string">'./src/js/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output : &#123;</span><br><span class="line"><span class="comment">//__dirname，就是当前webpack.config.js文件所在的绝对路径</span></span><br><span class="line">filename : <span class="string">'[name].js'</span>,</span><br><span class="line">path : path.join(__dirname, <span class="string">'./public/javascripts'</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  mode:<span class="string">"development"</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  query: &#123;</span><br><span class="line"><span class="string">'presets'</span>: [<span class="string">'es2015'</span>],</span><br><span class="line">plugins : [<span class="string">'transform-runtime'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后在 <strong><em>package.json</em></strong> 里编辑命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack -w"</span>,</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"node ./bin/www"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成，另开一个命令行，分别执行<code>$ npm run dev</code>和<code>$ DEBUG=yiyun:* npm start</code>，现在 <strong><em>webpack</em></strong> 会监视 <strong><em>js</em></strong> 的改动，并重新发布成 <strong><em>main.js</em></strong>，代码修改后只需要刷新浏览器就可以进行调试了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Express&lt;/em&gt;&lt;/strong&gt; 是一个基于 &lt;strong&gt;&lt;em&gt;Node.js&lt;/em&gt;&lt;/strong&gt; 平台的 &lt;strong&gt;&lt;em&gt;web&lt;/em&gt;&lt;/strong&gt; 应用开发框架，它提供一系列强大的特性，可以帮助开发者创建各种 &lt;strong&gt;&lt;em&gt;web&lt;/em&gt;&lt;/strong&gt; 和移动设备应用。&lt;br&gt;用 &lt;strong&gt;&lt;em&gt;Express&lt;/em&gt;&lt;/strong&gt; 框架开发 &lt;strong&gt;&lt;em&gt;web&lt;/em&gt;&lt;/strong&gt; 项目可以直接构建整个项目框架并且将前端页面跟后台贯穿起来。&lt;/p&gt;
&lt;p&gt;是一款高度包容、快速而极简的 &lt;strong&gt;&lt;em&gt;Node.js Web&lt;/em&gt;&lt;/strong&gt; 框架。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/701/1*EKW3XazCN98jcVrlEP3H8g.png&quot; alt=&quot;expressjs&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="learn" scheme="https://longlongyu.github.io/tags/learn/"/>
    
      <category term="express" scheme="https://longlongyu.github.io/tags/express/"/>
    
      <category term="webpack" scheme="https://longlongyu.github.io/tags/webpack/"/>
    
      <category term="babel" scheme="https://longlongyu.github.io/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>Hello-Hexo!</title>
    <link href="https://longlongyu.github.io/2018/06/20/HelloWorld/"/>
    <id>https://longlongyu.github.io/2018/06/20/HelloWorld/</id>
    <published>2018-06-20T06:39:37.000Z</published>
    <updated>2018-07-15T01:54:58.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello，Hexo"><a href="#Hello，Hexo" class="headerlink" title="Hello，Hexo!"></a>Hello，Hexo!</h1><p>使用了Github提供的个人页和Hexo博客框架搭建的博客。</p><p>希望可以利用这个平台更好的学习激励自己，多记录自己学习经历。</p><p><img src="/img/assets/hexo.jpg" alt="hexo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hello，Hexo&quot;&gt;&lt;a href=&quot;#Hello，Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hello，Hexo!&quot;&gt;&lt;/a&gt;Hello，Hexo!&lt;/h1&gt;&lt;p&gt;使用了Github提供的个人页和Hexo博客框架搭建的博客。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="learn" scheme="https://longlongyu.github.io/tags/learn/"/>
    
  </entry>
  
</feed>
