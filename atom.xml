<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Longlongyu的个人站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://longlongyu.github.io/"/>
  <updated>2018-07-15T03:26:47.965Z</updated>
  <id>https://longlongyu.github.io/</id>
  
  <author>
    <name>Longlongyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 3.2 Released</title>
    <link href="https://longlongyu.github.io/2018/08/28/2016-02-28-hexo-3-2-released/"/>
    <id>https://longlongyu.github.io/2018/08/28/2016-02-28-hexo-3-2-released/</id>
    <published>2018-08-28T06:14:27.790Z</published>
    <updated>2018-07-15T03:26:47.965Z</updated>
    
    <content type="html"><![CDATA[<p>It has been a long time that Hexo is poor at handling large website. (<a href="https://github.com/hexojs/hexo/issues/710" target="_blank" rel="noopener">#710</a>, <a href="https://github.com/hexojs/hexo/issues/1124" target="_blank" rel="noopener">#1124</a>, <a href="https://github.com/hexojs/hexo/issues/283" target="_blank" rel="noopener">#283</a>, <a href="https://github.com/hexojs/hexo/issues/1187" target="_blank" rel="noopener">#1187</a>, <a href="https://github.com/hexojs/hexo/issues/550" target="_blank" rel="noopener">#550</a>, <a href="https://github.com/hexojs/hexo/issues/1769" target="_blank" rel="noopener">#1769</a>, etc.) We tried hard to solve this problem and there’re several improvements in Hexo 3.2.</p><h2 id="It’s-all-about-speed"><a href="#It’s-all-about-speed" class="headerlink" title="It’s all about speed"></a>It’s all about speed</h2><h3 id="Caching-rendered-contents"><a href="#Caching-rendered-contents" class="headerlink" title="Caching rendered contents"></a>Caching rendered contents</h3><p>Rendered contents are cached in the warehouse. This saves a lot of time and made hot processing (2nd-time processing) <strong>1.7x faster</strong>.</p><table><thead><tr><th>Version</th><th>3.1</th><th>3.2</th></tr></thead><tbody><tr><td>Cold processing</td><td>6.094s</td><td>6.454s</td></tr><tr><td>Hot processing</td><td>5.154s</td><td>3.002s</td></tr></tbody></table><h3 id="Lazy-load-language-files-of-highlight-js"><a href="#Lazy-load-language-files-of-highlight-js" class="headerlink" title="Lazy load language files of highlight.js"></a>Lazy load language files of highlight.js</h3><p><a href="https://github.com/hexojs/hexo/issues/1036" target="_blank" rel="noopener">highlight.js is slow</a>. Especially when it try to detect the language. Lazy load language files make processing faster and don’t have to load bunch of unused language files. However there’re some limitations:</p><ul><li>Auto detect must be disabled.</li><li>You have to specify language in code block.</li></ul><p>You can set auto detect disabled in <code>_config.yml</code>.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="Templates-precompilation"><a href="#Templates-precompilation" class="headerlink" title="Templates precompilation"></a>Templates precompilation</h3><p>Theme templates are precompiled if possible. It makes generation speed <strong>2x faster</strong>.</p><table><thead><tr><th>Version</th><th>3.1</th><th>3.2</th></tr></thead><tbody><tr><td>Cold generation</td><td>27.2s</td><td>13.6s</td></tr><tr><td>Hot generation</td><td>24.4s</td><td>12.6s</td></tr></tbody></table><p>The following renderers have already supported this feature.</p><ul><li><a href="https://github.com/hexojs/hexo-renderer-ejs" target="_blank" rel="noopener">hexo-renderer-ejs</a></li><li><a href="https://github.com/hexojs/hexo-renderer-jade" target="_blank" rel="noopener">hexo-renderer-jade</a></li><li><a href="https://github.com/hexojs/hexo-renderer-swig" target="_blank" rel="noopener">hexo-renderer-swig</a></li></ul><p>And it’s easy to implement precompilation for renderers. Just add a <code>compile</code> function to the renderer. Take EJS renderer for example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>);</span><br><span class="line"><span class="keyword">var</span> assign = <span class="built_in">require</span>(<span class="string">'object-assign'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ejsRenderer</span>(<span class="params">data, locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ejs.render(data.text, assign(&#123;<span class="attr">filename</span>: data.path&#125;, locals));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ejsRenderer.compile = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ejs.compile(data.text, &#123;</span><br><span class="line">    filename: data.path</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ejsRenderer;</span><br></pre></td></tr></table></figure><h2 id="Include-exclude-source-files"><a href="#Include-exclude-source-files" class="headerlink" title="Include/exclude source files"></a>Include/exclude source files</h2><p>You can include/exclude specified source files in <code>_config.yml</code>.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">.htaccess</span></span><br><span class="line"></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">tmp/**/*</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://github.com/hexojs/hexo/releases" target="_blank" rel="noopener">changelog</a>, <a href="https://docs.google.com/spreadsheets/d/1nLW3fPCtrkfMolz8UnUiKq5lqys6bIcZqrfksuvQHA0/edit?usp=sharing" target="_blank" rel="noopener">benchmark results</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It has been a long time that Hexo is poor at handling large website. (&lt;a href=&quot;https://github.com/hexojs/hexo/issues/710&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo 3.0 Released</title>
    <link href="https://longlongyu.github.io/2018/08/28/2015-03-05-hexo-3-0-released/"/>
    <id>https://longlongyu.github.io/2018/08/28/2015-03-05-hexo-3-0-released/</id>
    <published>2018-08-28T06:14:27.789Z</published>
    <updated>2018-07-15T03:26:47.964Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 3.0 has finally come out! After four beta and four RC versions, Hexo 3 become more stable and more powerful. Thanks for the contributors and testers! </p><h2 id="What’s-Changed"><a href="#What’s-Changed" class="headerlink" title="What’s Changed?"></a>What’s Changed?</h2><p>There’re many improvements in Hexo 3. Better performance, API is easier to use, higher coverage, etc. Here’re some notable changes:</p><ul><li><strong><a href="https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#new-cli" target="_blank" rel="noopener">New CLI</a></strong>: Command line interface is separated into a stand-alone module: <a href="https://github.com/hexojs/hexo-cli" target="_blank" rel="noopener">hexo-cli</a></li><li><strong><a href="https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#slimmer-core-module" target="_blank" rel="noopener">Slimmer Core Module</a></strong>: Generators, deployers and server are also separated from the main module.</li><li><strong><a href="https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#new-generator-api" target="_blank" rel="noopener">New Generator API</a></strong>: Generator API changed a lot in Hexo 3.</li><li><strong><a href="https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#render-pipeline-changed" target="_blank" rel="noopener">Include Assets in a Post</a></strong>: Serveral useful tag plugins are added in Hexo 3: <code>post_path</code>, <code>post_link</code>, <code>asset_path</code>, <code>asset_link</code>, <code>asset_img</code>.</li><li><strong><a href="https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#async-tag-plugins" target="_blank" rel="noopener">Async Tag Plugins</a></strong>: Tag plugins can do async jobs now!</li><li><strong><a href="https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0#timezone-support" target="_blank" rel="noopener">Timezone Support</a></strong>: You can define the timezone of your site now.</li></ul><p>More info: <a href="https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0" target="_blank" rel="noopener">Breaking Changes in Hexo 3.0</a>, <a href="https://github.com/hexojs/hexo/releases" target="_blank" rel="noopener">changelog</a></p><h2 id="How-to-Update"><a href="#How-to-Update" class="headerlink" title="How to Update?"></a>How to Update?</h2><ol><li><p>Modify <code>package.json</code>.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Install <a href="https://github.com/hexojs/hexo-cli" target="_blank" rel="noopener">hexo-cli</a>. If any error occurred, try to remove hexo first.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>Install Hexo.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --save</span><br></pre></td></tr></table></figure></li><li><p>Install plugins. You don’t have to install all the following plugins. It depends on your need.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br><span class="line">$ npm install hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-archive --save</span><br><span class="line">$ npm install hexo-generator-category --save</span><br><span class="line">$ npm install hexo-generator-tag --save</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ npm install hexo-deployer-heroku --save</span><br><span class="line">$ npm install hexo-deployer-rsync --save</span><br><span class="line">$ npm install hexo-deployer-openshift --save</span><br></pre></td></tr></table></figure></li><li><p>Update plugins. Especially generators and filters. Since the API has breaking changes in Hexo 3.</p></li></ol><p>More info: <a href="https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0" target="_blank" rel="noopener">Migration from 2.x to 3.0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 3.0 has finally come out! After four beta and four RC versions, Hexo 3 become more stable and more powerful. Thanks for the contribu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>New Documentation and Registry</title>
    <link href="https://longlongyu.github.io/2018/08/28/2015-02-27-new-documentation-and-registry/"/>
    <id>https://longlongyu.github.io/2018/08/28/2015-02-27-new-documentation-and-registry/</id>
    <published>2018-08-28T06:14:27.787Z</published>
    <updated>2018-07-15T03:26:47.964Z</updated>
    
    <content type="html"><![CDATA[<p>The Hexo site has just been updated and changed to a brand new theme. The documentation is also updated and more detailed. Some handy features will make your browsing more convenient.</p><h2 id="Official-Registry"><a href="#Official-Registry" class="headerlink" title="Official Registry"></a>Official Registry</h2><p>Besides the new theme, a official registry for plugins and themes finally comes. The registry makes you easier to browse and search plugins. And you can preview themes with screenshots.</p><h3 id="How-to-add-my-plugin-theme-to-the-registry"><a href="#How-to-add-my-plugin-theme-to-the-registry" class="headerlink" title="How to add my plugin/theme to the registry?"></a>How to add my plugin/theme to the registry?</h3><p>See the following articles for more info. Your plugin/theme will be published to the registry once the pull request is merged.</p><ul><li><a href="/docs/themes.html#Publishing">Publish a theme</a></li><li><a href="/docs/plugins.html#Publishing">Publish a plugin</a></li></ul><h2 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h2><p>We have add two new languages of documentation: <a href="/zh-tw/">Tranditional Chinese (正體中文)</a> and <a href="/zh-cn/">Simplified Chinese (简体中文)</a>. Thanks to <a href="https://github.com/pinggod" target="_blank" rel="noopener">pinggod</a> for the Simplified Chinese translation. We very welcome you to help us translating and make more people easier to get started with Hexo! For more info, see <a href="/docs/contributing.html#Translating">translating documentation</a>.</p><h2 id="Where’s-API-Documentation"><a href="#Where’s-API-Documentation" class="headerlink" title="Where’s API Documentation?"></a>Where’s API Documentation?</h2><p>The API documentation is hidden so far. Please be patient. I’m updating it now. The new API doc will be released in a few days.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The Hexo site has just been updated and changed to a brand new theme. The documentation is also updated and more detailed. Some handy fea
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo 2.8 Released</title>
    <link href="https://longlongyu.github.io/2018/08/28/2014-07-13-hexo-2-8-released/"/>
    <id>https://longlongyu.github.io/2018/08/28/2014-07-13-hexo-2-8-released/</id>
    <published>2018-08-28T06:14:27.786Z</published>
    <updated>2018-08-28T06:42:26.641Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 2.8 was rewritten, brings you better performance and many improvements. The following is the highlights in this version. You can check <a href="https://github.com/hexojs/hexo/releases/tag/2.8.0" target="_blank" rel="noopener">detail</a> on GitHub.</p><h2 id="Faster-Processing-Speed"><a href="#Faster-Processing-Speed" class="headerlink" title="Faster Processing Speed"></a>Faster Processing Speed</h2><p>Before Hexo 2.8, all source files have to be processed each time you use Hexo. In Hexo 2.8, the entire database will be saved to <code>db.json</code> so Hexo don’t have to process all files again. Also, a new data type “<strong>skip</strong>“ was added for processors to detect whether a file was changed or not.</p><p>Generating was also changed in Hexo 2.8. You can check the elapsed time of each file in console now. However, I found multi-process generating didn’t affect generating speed a lot. Thus, <code>multi_thread</code> and <code>max_open_file</code> setting are deprecated in Hexo 2.8.</p><h2 id="Draft-Publish"><a href="#Draft-Publish" class="headerlink" title="Draft Publish"></a>Draft Publish</h2><p>You don’t have to enter full file name to publish a post anymore. Draft publish system is rewritten in Hexo 2.8. <code>new_post_name</code> setting will be applied until drafts are published. Besides, you can choose which layout to apply when publishing.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>A new API <code>post.publish</code> was added to help you publish drafts more easily.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo.post.publish(&#123;<span class="attr">slug</span>: <span class="string">'hello-world'</span>, <span class="attr">layout</span>: <span class="string">'post'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, target</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Permalink"><a href="#Permalink" class="headerlink" title="Permalink"></a>Permalink</h2><p>File name and permalink now share a more universal variable system. Every variables in file name can also be read in permalink. Here’s a config for example:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:type/:title/</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:type/:title.md</span></span><br></pre></td></tr></table></figure><p>When you create a post, the post will be saved to <code>source/_posts/test/Hello-World.md</code> and the URL will be <code>http://localhost:4000/test/Hello-World/</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"Hello World"</span> --<span class="built_in">type</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="Multi-language-Support"><a href="#Multi-language-Support" class="headerlink" title="Multi-language Support"></a>Multi-language Support</h2><p>With the new permalink introduced in the previous section, it’s much easier to create a multi-language site. For example:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:lang/:title/</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:lang/:title.md</span></span><br></pre></td></tr></table></figure><p>Then you can create a post with <code>--lang</code> option:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"Hello World"</span> --lang en</span><br><span class="line"><span class="comment"># =&gt; This post will be saved to source/_posts/en/Hello-World.md</span></span><br><span class="line"><span class="comment"># =&gt; URL: http://localhost:4000/en/Hello-World/</span></span><br><span class="line"></span><br><span class="line">$ hexo new <span class="string">"你好世界"</span> --lang tw</span><br><span class="line"><span class="comment"># =&gt; This post will be saved to source/_posts/tw/你好世界.md</span></span><br><span class="line"><span class="comment"># =&gt; URL: http://localhost:4000/tw/你好世界/</span></span><br></pre></td></tr></table></figure><p>You can define the default value of permalink variables in <code>permalink_defaults</code> setting. For example, we define the defualt language as English.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">  lang:</span> <span class="string">en</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>Hello.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'Hello World!'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 2.8 was rewritten, brings you better performance and many improvements. The following is the highlights in this version. You can che
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo 2.7 Released</title>
    <link href="https://longlongyu.github.io/2018/08/28/2014-06-14-hexo-2-7-released/"/>
    <id>https://longlongyu.github.io/2018/08/28/2014-06-14-hexo-2-7-released/</id>
    <published>2018-08-28T06:14:27.783Z</published>
    <updated>2018-07-15T03:26:47.958Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 2.7 has been released with three new features. I’m going to introduce them below.</p><h2 id="Fragment-Caching"><a href="#Fragment-Caching" class="headerlink" title="Fragment Caching"></a>Fragment Caching</h2><p>Although Hexo is fast, it may become slow if you have thousands of source files or complicated categories or tags. Before the data model upgraded, I borrowed a feature from Ruby on Rails: <strong>Fragment Caching</strong>.</p><p>Fragment Caching saves contents within a fragment and serves the cache when the next request come in. A fragment will only be processed once. It can reduce database queries and decrease generation time significantly. For instance, a Hexo site with 300+ source files needs 6 minutes to generate. In Hexo 2.7, it only need 10 seconds!</p><p>It can be used in header, footer, sidebar or static contents that won’t be changed during generating. For example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- fragment_cache(<span class="string">'header'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;header&gt;&lt;/header&gt;'</span>;</span><br><span class="line">&#125;); %&gt;</span><br></pre></td></tr></table></figure><p>By using <code>fragment_cache</code> helper, contents in the function will be cached.</p><p>Partial helper also supports Fragment Caching, you only need to add a <code>{cache: true}</code> option when using partial.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">'header'</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: <span class="literal">true</span>&#125;) %&gt;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="noopener">Landscape</a> is updated and supports Fragment Caching now. You can check <a href="https://github.com/hexojs/hexo-theme-landscape/commit/d2aedda61571d6994eb72d784ceda2f59d2a8631" target="_blank" rel="noopener">this commit</a> to see what’s changed.</p><h2 id="Relative-Link"><a href="#Relative-Link" class="headerlink" title="Relative Link"></a>Relative Link</h2><p>Relative Link is supported since Hexo 2.7. But your theme needs some modifications to support it. However, it’s not as hard as you think. You just need to replace the following contents in templates</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- config.root %&gt;&lt;%- path %&gt;</span><br></pre></td></tr></table></figure><p>with <code>url_for</code> helper.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- url_for(path) %&gt;</span><br></pre></td></tr></table></figure><p><code>url_for</code> helper will add <code>config.root</code> automatically for you. If you enable <code>relative_link</code> setting, it’ll add a relative path.</p><p><a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="noopener">Landscape</a> is updated for Relative Link. You can check <a href="https://github.com/hexojs/hexo-theme-landscape/commit/d29cbb83356373af27e7b98643f29a27804364af" target="_blank" rel="noopener">this commit</a> to see what’s changed.</p><h2 id="Server-Middleware"><a href="#Server-Middleware" class="headerlink" title="Server Middleware"></a>Server Middleware</h2><p>Server Middleware would be familiar if you have ever used <a href="http://www.senchalabs.org/connect/" target="_blank" rel="noopener">Connect</a> or <a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a> before. <a href="http://www.senchalabs.org/connect/" target="_blank" rel="noopener">Connect</a> passes a request through functions called <strong>middleware</strong>. You can make response to the coming in request in middleware.</p><p>In Hexo, middleware is served as a type of filter. You can add middleware by registering a new filter. For example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.filter.register(<span class="string">'server_middleware'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;</span><br><span class="line">  app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">    res.setHeader(<span class="string">'X-Powered-By'</span>, <span class="string">'Hexo'</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>This middleware add a header <code>X-Powered-By</code> and passes the request to the next middleware.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 2.7 has been released with three new features. I’m going to introduce them below.&lt;/p&gt;
&lt;h2 id=&quot;Fragment-Caching&quot;&gt;&lt;a href=&quot;#Fragment-C
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript的垃圾回收机制</title>
    <link href="https://longlongyu.github.io/2018/08/05/GarbageCollecation/"/>
    <id>https://longlongyu.github.io/2018/08/05/GarbageCollecation/</id>
    <published>2018-08-05T15:48:28.000Z</published>
    <updated>2018-08-08T09:12:28.160Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JavaScript</strong> 是一门很容易上手的语言。</p><p>他有着自动垃圾回收机制 <strong>(GC:Garbage Collecation)</strong> ，使我们撰写代码不用去手动去释放内存来管理和分配内存。因为这些全由 <strong>JavaScript</strong> 的 <strong>GC</strong> 来帮我们完成了，我们只需要快乐的敲打代码就好了。</p><p>然而， <strong>JavaScript</strong> 的 <strong>GC</strong> 虽然很便利，却也埋下了诸多隐患。例如，内存泄漏就是一个我们常常遇见的问题，让很多新手程序员对此一头雾水。而如果你了解了 <strong>JavaScript</strong> 的垃圾回收机制，你就能更好的避免和解决此类的问题，从而达到性能的优化。</p><a id="more"></a><h1 id="JavaScript-回收机制的原理"><a href="#JavaScript-回收机制的原理" class="headerlink" title="JavaScript 回收机制的原理"></a><strong>JavaScript</strong> 回收机制的原理</h1><p><strong>JavaScript</strong> 的垃圾回收机制是必要的，因为每次创建字符串、数组或对象时，<strong>JavaScript</strong> 的解释器并须从系统中分配内存来存储这些数据。而如果不释放这些数据，就会致使内存被过快消耗完，从而导致系统崩溃。</p><p><strong>JavaScript</strong> 垃圾回收的机制很简单: 就是在内存中找出那些不再使用的变量，然后将其占用的内存释放。</p><p>但是，这个过程却不是实时的。因为如果要时刻检测变量的状态，无疑会带来巨大的内存开销。为此， <strong>JavaScript</strong> 会周期性的进行一次检测，以此来释放那些已不被使用的内存。</p><h1 id="具体行为"><a href="#具体行为" class="headerlink" title="具体行为"></a>具体行为</h1><p>目前各大浏览器通常采用以下两种垃圾回收机制，来回收我们的内存，它们分别是: 标记清楚法和引用计数法。</p><h2 id="标记清楚法"><a href="#标记清楚法" class="headerlink" title="标记清楚法"></a>标记清楚法</h2><p>这是 <strong>JavaScript</strong> 中最常见的垃圾回收方式。当变量进入执行环境时，就标记这个变量为”进入环境”，从逻辑意义上来说，在执行环境中的变量并不需要我们去回收它的内存，因为只要执行流进入相应的环境，就有可能会被使用。而当它们离开环境时，则我们就可以回收这些内存，所以将其标记为”离开环境”。以方便在后面的步骤中释放它们。</p><p>之后在垃圾回收机制在执行时，会给内存中的所有变量加上标记。然后，去掉环境中的变量以及被环境中变量所引用的标记。而此外被加上标记的标记的变量，都视为待删除的变量，环境中的变量已经无法访问到这些变量了。</p><p>最后将那些标记的值销毁，回收其占用的内存，完成垃圾回收工作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span>;<span class="comment">//进入执行环境，被标记为"进入环境";</span></span><br><span class="line">&#125;</span><br><span class="line">test();<span class="comment">//执行 执行完后，a被标记为"离开环境"，等待释放</span></span><br></pre></td></tr></table></figure><h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><p>这是一种不太常见的垃圾回收策略。</p><p>引用计数的策略是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而垃圾回收机制就可以判断这个值为可回收。在下次垃圾回收机制在执行时，它会释放那些引用次数为0的值所占的内存。</p><p>不过该策略有一个缺陷:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">var</span> B = <span class="keyword">new</span> B();</span><br><span class="line">A.a = B;</span><br><span class="line">B.b = A;<span class="comment">// 此时A、B引用次数为2</span></span><br></pre></td></tr></table></figure><p>可以看到，由于对象A、B都有属性互相引用，从而导致引用次数不会为0，所以垃圾回收机制不会去回收此内存，从而导致了内存泄漏。</p><p>因此现在基本上所有浏览器都采用第一种方式来清楚内存。</p><h1 id="GC-的缺陷"><a href="#GC-的缺陷" class="headerlink" title="GC 的缺陷"></a>GC 的缺陷</h1><p>和其他语言一样，<strong>javascript</strong> 的 <strong>GC</strong> 策略也无法避免一个问题:</p><p><strong>GC</strong> 执行时，会停止响应其他操作。</p><p>虽然这是为了安全考虑，但也因此使 <strong>Javascript</strong> 的 <strong>GC</strong> 在 <strong>100ms</strong> 甚至以上，对一般的应用还好，但如果是 <strong>JS</strong> 游戏，动画等对连贯性要求比较高的应用，就会带来麻烦。</p><p>这也是目前 <strong>GC</strong> 引擎需要优化的点。</p><h1 id="GC优化策略"><a href="#GC优化策略" class="headerlink" title="GC优化策略"></a>GC优化策略</h1><p>目前有两种 <strong>GC</strong> 优化策略:</p><h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p>这个方法参考了 <strong>Java</strong> 的回收策略。就是通过区分对象的状态“临时”，还是“持久”；多回收“临时对象”区，少回收“持久对象”区，减少每次需遍历的对象，从而减少每次 <strong>GC</strong> 的耗时。</p><h2 id="增量GC"><a href="#增量GC" class="headerlink" title="增量GC"></a>增量GC</h2><p>这个方案的思想很简单，就是“每次处理一点，下次再处理一点”，如此类推。</p><p>这种方案，虽然耗时短，但中断较多，带来了上下文切换频繁的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 是一门很容易上手的语言。&lt;/p&gt;
&lt;p&gt;他有着自动垃圾回收机制 &lt;strong&gt;(GC:Garbage Collecation)&lt;/strong&gt; ，使我们撰写代码不用去手动去释放内存来管理和分配内存。因为这些全由 &lt;strong&gt;JavaScript&lt;/strong&gt; 的 &lt;strong&gt;GC&lt;/strong&gt; 来帮我们完成了，我们只需要快乐的敲打代码就好了。&lt;/p&gt;
&lt;p&gt;然而， &lt;strong&gt;JavaScript&lt;/strong&gt; 的 &lt;strong&gt;GC&lt;/strong&gt; 虽然很便利，却也埋下了诸多隐患。例如，内存泄漏就是一个我们常常遇见的问题，让很多新手程序员对此一头雾水。而如果你了解了 &lt;strong&gt;JavaScript&lt;/strong&gt; 的垃圾回收机制，你就能更好的避免和解决此类的问题，从而达到性能的优化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="learn" scheme="https://longlongyu.github.io/tags/learn/"/>
    
      <category term="javascript" scheme="https://longlongyu.github.io/tags/javascript/"/>
    
      <category term="garbage collecation" scheme="https://longlongyu.github.io/tags/garbage-collecation/"/>
    
  </entry>
  
  <entry>
    <title>关于HTML5语义化</title>
    <link href="https://longlongyu.github.io/2018/07/30/html5Semantic/"/>
    <id>https://longlongyu.github.io/2018/07/30/html5Semantic/</id>
    <published>2018-07-30T07:18:33.000Z</published>
    <updated>2018-08-10T16:21:27.512Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名前端 <strong>coder</strong>，或者正励志成为一名前端 <strong>coder</strong>，我们都知道 <strong>HTML</strong>。<strong>HTML</strong> 是 <strong>W3C</strong> 标准中结构化的标准语言，然而在 <strong>HTML5</strong> 出现以前，我们一般采用 <strong>DIV+CSS</strong> 来布局我们的页面。</p><p><code>div</code> 是无语义化的标签，大量使用这种标签会使我们的文档结构不够明确，从引发了开发者会根据自身喜好来进行自定义标签导致的影响浏览器解析，不利于浏览器的爬虫和机器地解析等诸多问题。</p><p>为了解决这些问题，<strong>HTML5</strong> 中新增了很多新的语义化标签，并且定义了相关规范。</p><a id="more"></a><h1 id="语义化标签的优点"><a href="#语义化标签的优点" class="headerlink" title="语义化标签的优点"></a>语义化标签的优点</h1><p>引入语义化标签的好处主要有以下几点：</p><ul><li>使我们的网页结构更加明确，方便开发与维护</li><li>搜索引擎能更方便的识别页面的每个部分</li><li>服务了残障人士（方便了如屏幕阅读器、盲人阅读器等工具对页面的识别）</li><li>更加符合对W3C中的定义</li></ul><h1 id="HTML5-语义化标签"><a href="#HTML5-语义化标签" class="headerlink" title="HTML5 语义化标签"></a>HTML5 语义化标签</h1><p>我们常用 <code>div</code> 来表示页面章节,但 <code>div</code> 本身没有任何语义。而 <strong>HTML5</strong> 语义标签是一种我们仅通过标签名就能判断出该标签内容的语义的标签。使我们更加直观的感受到网页的结构（看下图）。</p><p><img src="/img/demo/html5.png" alt="HTML5 Semantic"></p><p>这样使用的 <strong>HTML5</strong> 语义标签，使两者的差距很直接的就显现出来了。（当然，具体用哪些标签怎么用，取决于你或你的团队）。</p><p>但这也并不是说明我们要鄙弃 <code>div</code> 标签。<strong>W3C</strong> 定义了这些语义标签，却也不可能完全符合我们有时的设计目标，如果随意使用这些标签，就会与我们的初衷相背。所以我们还是要用 <code>div</code> 的，就是因为div没有任何意义的元素，他只是一个标签，仅仅是用来构建外观和结构。因此是最适合做容器的标签。</p><p>这也是 <code>div</code> 没有移除标准的原因，他依然能发挥出重要的作用。</p><p>点击这里查看→ <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5/HTML5_element_list" target="_blank" rel="noopener">w3c关于标签标准说明</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名前端 &lt;strong&gt;coder&lt;/strong&gt;，或者正励志成为一名前端 &lt;strong&gt;coder&lt;/strong&gt;，我们都知道 &lt;strong&gt;HTML&lt;/strong&gt;。&lt;strong&gt;HTML&lt;/strong&gt; 是 &lt;strong&gt;W3C&lt;/strong&gt; 标准中结构化的标准语言，然而在 &lt;strong&gt;HTML5&lt;/strong&gt; 出现以前，我们一般采用 &lt;strong&gt;DIV+CSS&lt;/strong&gt; 来布局我们的页面。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;div&lt;/code&gt; 是无语义化的标签，大量使用这种标签会使我们的文档结构不够明确，从引发了开发者会根据自身喜好来进行自定义标签导致的影响浏览器解析，不利于浏览器的爬虫和机器地解析等诸多问题。&lt;/p&gt;
&lt;p&gt;为了解决这些问题，&lt;strong&gt;HTML5&lt;/strong&gt; 中新增了很多新的语义化标签，并且定义了相关规范。&lt;/p&gt;
    
    </summary>
    
    
      <category term="learn" scheme="https://longlongyu.github.io/tags/learn/"/>
    
      <category term="html" scheme="https://longlongyu.github.io/tags/html/"/>
    
      <category term="semantic" scheme="https://longlongyu.github.io/tags/semantic/"/>
    
  </entry>
  
  <entry>
    <title>对line-height的一些理解</title>
    <link href="https://longlongyu.github.io/2018/07/23/DeepUnderstandingLineHeight/"/>
    <id>https://longlongyu.github.io/2018/07/23/DeepUnderstandingLineHeight/</id>
    <published>2018-07-23T14:21:53.000Z</published>
    <updated>2018-08-10T16:23:34.679Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>line-height</em></strong> 顾名思义就是 <strong>行高</strong>，是用来设置行间的距离，她确实是发挥这样着作用，但单单这样的去理解却也太过于粗浅了。</p><p>首先，具体先了解一下一些相关的概念。想一想在我们在刚开始学习英语课时，老师在黑板上画了四条线，这四条线是英文字母用来书写时的4根横向的平行线，而 <code>vertical-align</code> 中的 <strong>top</strong> , <strong>middle</strong> , <strong>baseline</strong> , <strong>bottom</strong> 就是基于这样的概念。</p><p>接下来我们看看 <strong><em>MDN</em></strong> 对 <strong><em>line-height</em></strong> 的描述，他是这样的：</p><blockquote><p>The <code>line-height</code> CSS property sets the amount of space used for<br>lines, such as in text. On block-level elements, it specifies<br>the minimum height of line boxes within the element. On non-<br>replaced inline elements, it specifies the height that is used<br>to calculate line box height.</p></blockquote><p><code>line-height</code> <strong><em>CSS</em></strong> 属性用于设置多行元素的空间量什么的，这些什么的先不考虑。在上面说明中，涉及到两个很重要的概念，<code>line boxes</code> 和 <code>inline boxes</code> 。</p><a id="more"></a><h1 id="inline-boxes模型"><a href="#inline-boxes模型" class="headerlink" title="inline boxes模型"></a>inline boxes模型</h1><p>我们先说说 <code>inline boxes</code> ，不过在这之前我们的先聊下盒子。说到盒子，我们很容易联想到 <strong>block</strong> 的块级盒子，<strong>inline</strong> 行内盒子，以及两者之间的 <strong>inline-block</strong> 的行内块级盒子。他们的形成也是因为我们使用了所对应的标签，而这些是我们所知很容易了解到的。但请想一想，在这之下是否还有盒子存在呢？例如我们写在盒子中的文字属于盒子吗？属于哪种盒子？</p><p>是的，他们属于盒子。我们都知道行级盒子是在同行进行排列的。一行内这些盒子无论大小都是 <code>inline boxes</code> 。由 <strong>inline-block</strong> 和 <strong>inline</strong> 生成的是具名的 <code>inline box</code> ，而文字则是匿名的 <code>inline box</code> 。</p><h1 id="line-boxes模型"><a href="#line-boxes模型" class="headerlink" title="line boxes模型"></a>line boxes模型</h1><p>在了解了 <code>inline boxes</code> ，先不着急，先了解 <code>line boxes</code> 。不过 ，<code>line boxes</code> 到底是个啥呢？</p><p>简单来说 <code>line box</code> 就是包含一行内若干个 <code>inline boxes</code> 的盒子。而这些 <code>inline boxes</code> 中最高的盒子会撑起 <code>line box</code> 的高度。没有指定高度的块级元素和行内块级元素其高度就是由这些 <code>line boxes</code> 累积堆起来的，而除此之外，<code>line boxes</code> 不具有其他特性。</p><h1 id="line-height与line-boxes高度"><a href="#line-height与line-boxes高度" class="headerlink" title="line-height与line boxes高度"></a>line-height与line boxes高度</h1><p>在知道上面的两个概念之后，我们来探讨一些相关的问题。</p><p>一个空的 <strong>div</strong> 在没有设置至少大于1像素高度 <strong>height</strong> 值时，他的高度为0。但如果在里面输入一个文字后，<strong>div</strong> 却拥有高度了。可为什么 <strong>div</strong> 里面有文字后就会有高度呢？</p><p>可能有人会觉得是因为文字大小关系，文字占据空间，从而使 <strong>div</strong> 拥有了高度。然后事实确是，文字并没有撑开了 <strong>div</strong> 的高度，而是 <code>line-height</code> ！</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/longlongyu/j4m0wu8c/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>结果是显而易见，是 <code>line-height</code> 撑开了 <strong>div</strong> 的高度。如果你还是感到疑问，还可以看看下面的例子，通过结合上面所说的两个模型更加容易理解。</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/longlongyu/bwjLfovs/39/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><h1 id="line-height与img被div包裹产生的空隙"><a href="#line-height与img被div包裹产生的空隙" class="headerlink" title="line-height与img被div包裹产生的空隙"></a>line-height与img被div包裹产生的空隙</h1><p>相信大家在撰写样式的过程中，一定遇到过这个现象，用 <strong>div</strong> 包裹着一张图片， <strong>div</strong> 却并没有将其完美的包裹起来，而是留有一条小小的空隙。那么，为什么发生这种现象呢？</p><p>通过上面的概念我们就明白这是为什么了。首先我们知道 <strong>img</strong> 即是行内元素也是可替换元素<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element" title="Replaced Element" target="_blank" rel="noopener">(Replaced Element)</a>，在默认时，文本是按照基线进行对齐的，<strong>img</strong> 在这里是独居一行的 <code>line box</code> ，而 <code>line boxes</code> 通过 <code>line-height</code> 撑起了盒子的高度，同时由于 <strong>img</strong> 是可替换元素，拥有着自己的 <strong>height</strong> ，两者加算，就产生出了空隙。</p><p>解决方法也很简单，换一种对齐方式就可以解决这个问题了。<code>line-height: 0</code> 也行，但可能会引发诸多问题。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本文主要讲述了一些自己对 <code>line-height</code> 和 <code>inline box</code> 模型的理解，对 <code>line-height</code> 的基础的知识并没有进行累述，如果有纰漏之处，欢迎指正。还有兴趣想了解更多相关知识的，可以看看张鑫旭大神的<a href="http://www.cssworld.cn/" target="_blank" rel="noopener">《CSS世界》</a>，里面有更加详细的讲解。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;line-height&lt;/em&gt;&lt;/strong&gt; 顾名思义就是 &lt;strong&gt;行高&lt;/strong&gt;，是用来设置行间的距离，她确实是发挥这样着作用，但单单这样的去理解却也太过于粗浅了。&lt;/p&gt;
&lt;p&gt;首先，具体先了解一下一些相关的概念。想一想在我们在刚开始学习英语课时，老师在黑板上画了四条线，这四条线是英文字母用来书写时的4根横向的平行线，而 &lt;code&gt;vertical-align&lt;/code&gt; 中的 &lt;strong&gt;top&lt;/strong&gt; , &lt;strong&gt;middle&lt;/strong&gt; , &lt;strong&gt;baseline&lt;/strong&gt; , &lt;strong&gt;bottom&lt;/strong&gt; 就是基于这样的概念。&lt;/p&gt;
&lt;p&gt;接下来我们看看 &lt;strong&gt;&lt;em&gt;MDN&lt;/em&gt;&lt;/strong&gt; 对 &lt;strong&gt;&lt;em&gt;line-height&lt;/em&gt;&lt;/strong&gt; 的描述，他是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;line-height&lt;/code&gt; CSS property sets the amount of space used for&lt;br&gt;lines, such as in text. On block-level elements, it specifies&lt;br&gt;the minimum height of line boxes within the element. On non-&lt;br&gt;replaced inline elements, it specifies the height that is used&lt;br&gt;to calculate line box height.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;line-height&lt;/code&gt; &lt;strong&gt;&lt;em&gt;CSS&lt;/em&gt;&lt;/strong&gt; 属性用于设置多行元素的空间量什么的，这些什么的先不考虑。在上面说明中，涉及到两个很重要的概念，&lt;code&gt;line boxes&lt;/code&gt; 和 &lt;code&gt;inline boxes&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="learn" scheme="https://longlongyu.github.io/tags/learn/"/>
    
      <category term="CSS" scheme="https://longlongyu.github.io/tags/CSS/"/>
    
      <category term="line-height" scheme="https://longlongyu.github.io/tags/line-height/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-Cxo</title>
    <link href="https://longlongyu.github.io/2018/07/18/hexoThemeCxo/"/>
    <id>https://longlongyu.github.io/2018/07/18/hexoThemeCxo/</id>
    <published>2018-07-18T09:40:09.000Z</published>
    <updated>2018-07-23T20:54:59.176Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/demo/demo.png" alt="Cxo"></p><p>如果你喜欢这款主题，可以访问GITHUB地址：<a href="https://github.com/Longlongyu/hexo-theme-Cxo" title="hexo-theme-Cxo" target="_blank" rel="noopener">点这里</a></p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p>遇到任何使用上的问题，都可以向我留言。</p><p>感谢您的使用！</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/demo/demo.png&quot; alt=&quot;Cxo&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你喜欢这款主题，可以访问GITHUB地址：&lt;a href=&quot;https://github.com/Longlongyu/hexo-theme-Cxo&quot; title=&quot;hexo-theme-Cxo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;帮助&quot;&gt;&lt;a href=&quot;#帮助&quot; class=&quot;headerlink&quot; title=&quot;帮助&quot;&gt;&lt;/a&gt;帮助&lt;/h2&gt;&lt;p&gt;遇到任何使用上的问题，都可以向我留言。&lt;/p&gt;
&lt;p&gt;感谢您的使用！&lt;/p&gt;
    
    </summary>
    
    
      <category term="theme" scheme="https://longlongyu.github.io/tags/theme/"/>
    
      <category term="hexo" scheme="https://longlongyu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Express来开发项目</title>
    <link href="https://longlongyu.github.io/2018/06/28/Exercise/"/>
    <id>https://longlongyu.github.io/2018/06/28/Exercise/</id>
    <published>2018-06-28T06:39:37.000Z</published>
    <updated>2018-07-06T09:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Express</em></strong> 是一个基于 <strong><em>Node.js</em></strong> 平台的 <strong><em>web</em></strong> 应用开发框架，它提供一系列强大的特性，可以帮助开发者创建各种 <strong><em>web</em></strong> 和移动设备应用。<br>用 <strong><em>Express</em></strong> 框架开发 <strong><em>web</em></strong> 项目可以直接构建整个项目框架并且将前端页面跟后台贯穿起来。</p><p>是一款高度包容、快速而极简的 <strong><em>Node.js Web</em></strong> 框架。</p><p><img src="https://cdn-images-1.medium.com/max/701/1*EKW3XazCN98jcVrlEP3H8g.png" alt="expressjs"></p><a id="more"></a><h1 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p><strong><em>Express</em></strong> 是基于 <strong><em>Node.js</em></strong> 的，所以 <strong><em>Node.js</em></strong> 的安装必不可少，不过因为之前通过 <strong><em>hexo</em></strong> 来架构博客的原因，我的电脑已经安装了。</p><p><img src="/img/assets/nodejs.png" alt="nodejs"></p><h2 id="用npm安装express"><a href="#用npm安装express" class="headerlink" title="用npm安装express"></a>用npm安装express</h2><p><strong><em>npm</em></strong> 是随同 <strong><em>Node.js</em></strong> 一起安装的包管理工具，可以用来安装卸载一些 <strong><em>api</em></strong> 包。<br>使用命令行工具<code>$ npm install (要安装的包)</code>进行本地安装，可以加上<code>-g</code>或者<code>--global</code>进行全局安装。<br>这里执行命令<code>$ npm install express</code>就行。</p><hr><h1 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h1><h2 id="使用express来新建项目框架"><a href="#使用express来新建项目框架" class="headerlink" title="使用express来新建项目框架"></a>使用express来新建项目框架</h2><p><code>cd</code>进入想要建项目的文件夹，执行<code>$ express (项目名称)</code>，会在该目录下创建一个新的你所命名的项目工程。<br>这里我执行的是<code>$ express yiyun --pug --css sass</code>，因为我这里使用了 <strong><em>pug</em></strong> 和 <strong><em>sass</em></strong> 来协助项目开发。   </p><p><strong>关于项目框架的说明</strong></p><blockquote><p>/bin: www  文件用于应用启动<br>/public: 静态资源目录：用来放置项目资源文件的<br>/routes: 路由，是项目的控制器，不过我对其了解不太深，是学习的重点之一<br>/views: view(视图)目录，用来放置前端页面的样式<br>app.js：程序的主文件夹，目前项目中有用到的就是添加新的页面以及页面相应的路由需要在这里配置<br>package.json：项目中用到的一些包的版本信息</p></blockquote><h2 id="试运行项目"><a href="#试运行项目" class="headerlink" title="试运行项目"></a>试运行项目</h2><p>项目创建好了之后，用命令行进入项目根目录，然后用<code>npm i</code>命令会安装 <strong><em>package.json</em></strong> 中的依赖项目。<br>通过执行<code>$ npm start</code>启动项目，到浏览器输入：<strong><em>localhost:3000</em></strong>，看到 <strong><em>Express</em></strong> 说明成功运行。</p><hr><h1 id="更好的开发体验"><a href="#更好的开发体验" class="headerlink" title="更好的开发体验"></a>更好的开发体验</h1><p>在编写项目的过程中，对代码进行调试时，每次调试时都需要关闭服务器才能进行重新刷新页面。<br>可以说对开发有着极大的不便，我们需要一些工具来让帮助我们有更好的开发体验。</p><h2 id="Express的debug模块"><a href="#Express的debug模块" class="headerlink" title="Express的debug模块"></a>Express的debug模块</h2><p>命令行输入<code>$ DEBUG=(项目名称):* npm start</code>就能执行 <strong><em>express</em></strong> 的 <strong><em>debug</em></strong> 模块。</p><h2 id="使用babel来写ES6"><a href="#使用babel来写ES6" class="headerlink" title="使用babel来写ES6"></a>使用babel来写ES6</h2><p>我在编写项目的 <strong><em>javascript</em></strong> 时，使用了 <strong><em>ES6</em></strong> 标准来撰写代码，但是目前的浏览器不支持大多的 <strong><em>ES6</em></strong> 标准，<br>这时候需要一款工具 <strong><em>babel</em></strong> 来帮助我们，<strong><em>babel</em></strong> 可以将 <strong><em>ES6</em></strong> 的代码转换为 <strong><em>ES5</em></strong> 标准，在当下 <strong><em>ES6</em></strong> 还没有在浏览器普及的今天，这可是大利器。</p><p>执行<code>$ npm install -g --save-dev babel-cli babel-core babel-plugin-transform-runtime babel-preset-es2015</code><br><strong><em>babel</em></strong> 已经在我们的项目中创建好了，这里的参数<code>--save-dev</code>会将所下载的工具保存到 <strong><em>package.json</em></strong> 的依赖项目中。</p><p>新建文件 <strong><em>.babelrc</em></strong> 并且写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;es2015&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据需求在命令行输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 转码结果输出到标准输出</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> babel example.js</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 转码结果写入一个文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --out-file 或 -o 参数指定输出文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> babel example.js --out-file compiled.js</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> babel example.js -o compiled.js</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 整个目录转码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --out-dir 或 -d 参数指定输出目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> babel src --out-dir lib</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> babel src -d lib</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> -s 参数生成<span class="built_in">source</span> map文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> babel src -d lib -s</span></span><br></pre></td></tr></table></figure><p>这样就可以简单地运行 <strong><em>babel</em></strong> 了。</p><h2 id="搭配webpack来开发"><a href="#搭配webpack来开发" class="headerlink" title="搭配webpack来开发"></a>搭配webpack来开发</h2><p>虽然可以编写 <strong><em>ES6</em></strong> 的代码了，但开发友好度依然不好，而且在调试的时候依然遇到了问题。   </p><p><code>Uncaught ReferenceError: require is not defined</code></p><p>再查看一下错误位置，发现出现错误的原因是因为我们使用了 <strong><em>import</em></strong> 和 <strong><em>export</em></strong> ，<strong><em>babel</em></strong> 对其只是进行了翻译，并不会合并代码的内容。所以我们需要另一项工具———— <strong><em>webpack</em></strong>。</p><p><strong><em>webpack</em></strong> 是一个模块打包器。<strong><em>webpack</em></strong> 的主要目标是将 <strong><em>JavaScript</em></strong> 文件打包在一起，将打包后的文件用于在浏览器中使用。</p><p>并且我们使用了 <strong><em>babel</em></strong> ，需要使用 <code>babel-loader</code> 来更好协助打包。</p><p>了解用途后，来命令行执行<code>$ npm install -g --save-dev webpack webpack-cli babel-loader</code></p><p>新建<code>webpack.config.js</code>文件，并对其进行配置   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry : &#123;</span><br><span class="line">main : <span class="string">'./src/js/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output : &#123;</span><br><span class="line"><span class="comment">//__dirname，就是当前webpack.config.js文件所在的绝对路径</span></span><br><span class="line">filename : <span class="string">'[name].js'</span>,</span><br><span class="line">path : path.join(__dirname, <span class="string">'./public/javascripts'</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  mode:<span class="string">"development"</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  query: &#123;</span><br><span class="line"><span class="string">'presets'</span>: [<span class="string">'es2015'</span>],</span><br><span class="line">plugins : [<span class="string">'transform-runtime'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后在 <strong><em>package.json</em></strong> 里编辑命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack -w"</span>,</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"node ./bin/www"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成，另开一个命令行，分别执行<code>$ npm run dev</code>和<code>$ DEBUG=yiyun:* npm start</code>，现在 <strong><em>webpack</em></strong> 会监视 <strong><em>js</em></strong> 的改动，并重新发布成 <strong><em>main.js</em></strong>，代码修改后只需要刷新浏览器就可以进行调试了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Express&lt;/em&gt;&lt;/strong&gt; 是一个基于 &lt;strong&gt;&lt;em&gt;Node.js&lt;/em&gt;&lt;/strong&gt; 平台的 &lt;strong&gt;&lt;em&gt;web&lt;/em&gt;&lt;/strong&gt; 应用开发框架，它提供一系列强大的特性，可以帮助开发者创建各种 &lt;strong&gt;&lt;em&gt;web&lt;/em&gt;&lt;/strong&gt; 和移动设备应用。&lt;br&gt;用 &lt;strong&gt;&lt;em&gt;Express&lt;/em&gt;&lt;/strong&gt; 框架开发 &lt;strong&gt;&lt;em&gt;web&lt;/em&gt;&lt;/strong&gt; 项目可以直接构建整个项目框架并且将前端页面跟后台贯穿起来。&lt;/p&gt;
&lt;p&gt;是一款高度包容、快速而极简的 &lt;strong&gt;&lt;em&gt;Node.js Web&lt;/em&gt;&lt;/strong&gt; 框架。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/701/1*EKW3XazCN98jcVrlEP3H8g.png&quot; alt=&quot;expressjs&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="learn" scheme="https://longlongyu.github.io/tags/learn/"/>
    
      <category term="express" scheme="https://longlongyu.github.io/tags/express/"/>
    
      <category term="webpack" scheme="https://longlongyu.github.io/tags/webpack/"/>
    
      <category term="babel" scheme="https://longlongyu.github.io/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>Hello-Hexo!</title>
    <link href="https://longlongyu.github.io/2018/06/20/HelloWorld/"/>
    <id>https://longlongyu.github.io/2018/06/20/HelloWorld/</id>
    <published>2018-06-20T06:39:37.000Z</published>
    <updated>2018-07-15T01:54:58.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello，Hexo"><a href="#Hello，Hexo" class="headerlink" title="Hello，Hexo!"></a>Hello，Hexo!</h1><p>使用了Github提供的个人页和Hexo博客框架搭建的博客。</p><p>希望可以利用这个平台更好的学习激励自己，多记录自己学习经历。</p><p><img src="/img/assets/hexo.jpg" alt="hexo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hello，Hexo&quot;&gt;&lt;a href=&quot;#Hello，Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hello，Hexo!&quot;&gt;&lt;/a&gt;Hello，Hexo!&lt;/h1&gt;&lt;p&gt;使用了Github提供的个人页和Hexo博客框架搭建的博客。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="learn" scheme="https://longlongyu.github.io/tags/learn/"/>
    
  </entry>
  
</feed>
